{
 "metadata": {
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.8-final"
  },
  "orig_nbformat": 2,
  "kernelspec": {
   "name": "python37664bitbaseconda10232f792aef4e03b085a3566ed2c3d6",
   "display_name": "Python 3.7.6 64-bit ('base': conda)"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2,
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Class"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A programação orientada a objetos é uma das\n",
    "abordagens mais eficazes para escrever softwares. Na programação orientada a objetos, você\n",
    "escreva *classes* que representem coisas do mundo real\n",
    "e situações, e você cria *objetos* com base nesses\n",
    "*classes*. Ao escrever uma *classe*, você define o\n",
    "comportamento que toda uma categoria de objetos pode ter.\n",
    "\n",
    "Vamos começar com um exemplo simples e acrescentamos mais funcionalidades ao longo da aula. Uma pessoa pode ser como um objeto que pertence a classe de seres humanos. Para começar vamos assumir que um ser humano só tem dois atributos, sexualidade e naturalidade. E alem disso, esse ser humano faz aniversario, dorme e acorda."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "class humano:\n",
    "    '''Definir um ser humano primitivo'''\n",
    "\n",
    "    def __init__(self, nome, sexo):\n",
    "        self.nome = nome\n",
    "        self.naturalidade = naturalidade\n",
    "        self.sexo = sexo\n",
    "    def dormir(self):\n",
    "        self.status = \"dormindo\"\n",
    "        print(f\"{self.nome} está {self.status}\")\n",
    "\n",
    "    def acordar(self):\n",
    "        self.status = \"acordado\"\n",
    "        print(f\"{self.nome} está {self.status}\")\n",
    "\n",
    "    def descrever(self):\n",
    "        print(f\"{self.nome} um(a) {self.sexo} e no momento está {self.status}.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Antes de explicar os detalhes vamos criar um 'ser humano' usando esse classe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "sophia = humano(\"Sophia\", \"mulher\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Agora vamos fazer a Sophia dormir"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Sophia está dormindo\n"
    }
   ],
   "source": [
    "sophia.dormir()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "E o metodo *descrever*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Sophia um(a) mulher e é natural de Juiz de Fora e no momento está dormindo.\n"
    }
   ],
   "source": [
    "sophia.descrever()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Podemos acessar os atributos de um objeto na seguinte forma"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": "'mulher'"
     },
     "metadata": {},
     "execution_count": 59
    }
   ],
   "source": [
    "sophia.sexo"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Até agora, com certeza, muitos os codigos anteriores do Python ficaram mais claros para voces! Quando criamos uma variavel tipo string, na verdade, estamos criando um objeto do *classe* string. E esse objeto tem varios atributos e metodos definidos dentro do *classe*.\n",
    "\n",
    "Agora vamos analisar os pedaços deste classe. \n",
    "\n",
    "```python\n",
    "def __init__(self, nome, sexo):\n",
    "        self.nome = nome\n",
    "        self.sexo = sexo\n",
    "```\n",
    "A função __init__ não é um elemento obrigatorio para criar um objeto mas se a gente quiser definir algumas caracteristicas do objeto na hora de criação temos que fazer isso atraves dessa função pre-definida. O Python na hora de criar um objeto de um *classe* procura por essa função.\n",
    "\n",
    "o argumento `self` pode ser interpretado como a *alma* do objeto. Quando criamos um objeto de uma classe, esse objeto terá uma identidade, uma alma. Por isso, dentro do classe, todas as funções tem esse elemento como um argumento. Porque elas querem fazer algo sobre ele. \n",
    "\n",
    "self.nome = nome e `self.sexo = sexo` associam o sexo e naturalidade que são inseridos na hora de criação do objeto com a identidade do objeto. \n",
    "\n",
    "\n",
    "```python\n",
    "def dormir(self):\n",
    "        self.status = \"dormindo\"\n",
    "        print(f\"{self.name} está {self.status}\")\n",
    "\n",
    "```\n",
    "Essa função faz parte do comportamento do classe. Na definição desta função criamos um atributos novo para o *self*. Esse atributo pode ser alterado com a função `acordar()`\n",
    "\n",
    "\n",
    "Bem, um ser humano cresce e faz aniversario. Vamos definir uma função dentro do classe de tal forma que a chamando faça a pessoa crescer!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "class humano:\n",
    "    '''Definir um ser humano primitivo'''\n",
    "\n",
    "    def __init__(self, nome, sexo):\n",
    "        self.nome = nome\n",
    "        self.sexo = sexo\n",
    "        self.idade = 0\n",
    "    def dormir(self):\n",
    "        self.status = \"dormindo\"\n",
    "        print(f\"{self.nome} está {self.status}\")\n",
    "\n",
    "    def acordar(self):\n",
    "        self.status = \"acordado\"\n",
    "        print(f\"{self.nome} está {self.status}\")\n",
    "\n",
    "    def descrever(self):\n",
    "        print(f\"{self.nome} um(a) {self.sexo} e no momento está {self.status}.\")\n",
    "\n",
    "    def aniversario(self):\n",
    "        self.idade += 1\n",
    "        print(f\"{self.nome} cresceu um ano e agora tem {self.idade} ano(s)\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "yasmin = humano(\"Yasmin\", \"Mulher\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": "0"
     },
     "metadata": {},
     "execution_count": 38
    }
   ],
   "source": [
    "yasmin.idade"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Yasmin cresceu um ano e agora tem 1 ano(s)\n"
    }
   ],
   "source": [
    "yasmin.aniversario()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": "1"
     },
     "metadata": {},
     "execution_count": 40
    }
   ],
   "source": [
    "yasmin.idade"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Para mudar um atributo temos duas opções, alterar diretamente ou definir uma função para isso. Em cima, alteramos a idade com ajuda de uma função, agora vamos alterar diretamente. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "yasmin.idade = 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": "10"
     },
     "metadata": {},
     "execution_count": 58
    }
   ],
   "source": [
    "yasmin.idade"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Vamos adicionar mais um metodo para o nosso classe para determinar se a pessoa está feliz ou não"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "class humano:\n",
    "    '''Definir um ser humano primitivo'''\n",
    "\n",
    "    def __init__(self, nome, sexo):\n",
    "        self.nome = nome\n",
    "        self.sexo = sexo\n",
    "        self.idade = 0\n",
    "    def dormir(self):\n",
    "        self.status = \"dormindo\"\n",
    "        print(f\"{self.nome} está {self.status}\")\n",
    "\n",
    "    def acordar(self):\n",
    "        self.status = \"acordado\"\n",
    "        print(f\"{self.nome} está {self.status}\")\n",
    "\n",
    "    def descrever(self):\n",
    "        print(f\"{self.nome} um(a) {self.sexo} e no momento está {self.status}.\")\n",
    "\n",
    "    def aniversario(self):\n",
    "        self.idade += 1\n",
    "        print(f\"{self.nome} cresceu um ano e agora tem {self.idade} ano(s)\")\n",
    "\n",
    "    def isfeliz(self):\n",
    "        import numpy as np\n",
    "        self.feliz = np.random.choice(['Não está', 'está'], p = [0.1, 0.9])\n",
    "        print(f\"{self.nome} {self.feliz} feliz\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "heitor = humano(nome=\"Heitor\", sexo=\"Homem\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Heitor está feliz\n"
    }
   ],
   "source": [
    "heitor.isfeliz()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Herança"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Você nem sempre precisa começar do zero ao escrever uma classe. Se a classe que você está escrevendo é uma versão especializada de outra classe que você já escreveu, você pode usar a *herança*. Quando uma classe herda de outra, assume os atributos e métodos da primeira classe. A classe original é chamada de classe mãe (pai, ingles=parent) e a nova classe é a classe filho. A classe filho pode herdar um ou todos os atributos e métodos de sua classe mãe, mas também é livre para definir novos atributos e métodos."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [],
   "source": [
    "class uerjiano(humano):\n",
    "    \"\"\"Definir um etudante da UERJ que é um ser humano (a principio!!!)\"\"\"\n",
    "\n",
    "    def __init__(self, nome, sexo, curso, ano):\n",
    "\n",
    "        super().__init__(nome, sexo)\n",
    "        \n",
    "        self.ano = ano\n",
    "        self.curso = curso\n",
    "    \n",
    "    def periodo(self):\n",
    "        from datetime import datetime\n",
    "\n",
    "        self.periodo = datetime.now().year - int(self.ano)\n",
    "        print(f\" {self.nome} está no periodo {2 * self.periodo}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [],
   "source": [
    "john = uerjiano(\"john\", \"Homem\", \"produção\", 2016)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": "'Homem'"
     },
     "metadata": {},
     "execution_count": 126
    }
   ],
   "source": [
    "john.sexo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "john está no periodo 8\n"
    }
   ],
   "source": [
    "john.periodo()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Na classe `uerjiano`, dentro do `__init__`, aparece um metodo novo, o `super().__init__`. Na verdade, atraves dessa função inicializamos o constructor (init) da classe mão e passamos os argumentos relacionados para ela. \n",
    "\n",
    "Dá para ver que uma classe filho pode ter funções (metodos) que não existem na classe mão. Aqui temos o metodo `periodo()`. Tambem é possivel fazer *override* das funções da classe mãe e definir outra função nova"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [],
   "source": [
    "class uerjiano(humano):\n",
    "    \"\"\"Definir um etudante da UERJ que é um ser humano (a principio!!!)\"\"\"\n",
    "\n",
    "    def __init__(self, nome, sexo, curso, ano):\n",
    "\n",
    "        super().__init__(nome, sexo)\n",
    "        import numpy as np\n",
    "        # foi adicionado o atributo 'feliz' aqui por um proposito que será esclarecido embaixo\n",
    "        self.feliz = np.random.choice(['Não está', 'está'], p = [0.8, 0.2])\n",
    "        self.ano = ano\n",
    "        self.curso = curso\n",
    "    \n",
    "    def periodo(self):\n",
    "        from datetime import datetime\n",
    "\n",
    "        self.periodo = datetime.now().year - int(self.ano)\n",
    "        print(f\" {self.nome} está no periodo {2 * self.periodo}\")\n",
    "        \n",
    "    def isfeliz(self):\n",
    "        import numpy as np\n",
    "        # as probabilidades são diferentes da classe mãe!\n",
    "        self.feliz = np.random.choice(['Não está', 'está'], p = [0.8, 0.2])\n",
    "        #print(f\"{self.nome} {self.feliz} feliz\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [],
   "source": [
    "isabella = uerjiano(\"isabella\", \"Mulher\", \"quimica\", 2016)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": "'Não está'"
     },
     "metadata": {},
     "execution_count": 164
    }
   ],
   "source": [
    "isabella.feliz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "16\n"
    }
   ],
   "source": [
    "count = 0 \n",
    "for _ in range(100):\n",
    "    isabella.isfeliz()\n",
    "    if isabella.feliz == 'está':\n",
    "        count+=1\n",
    "\n",
    "print(count)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Dentro do `__init__` podemos ter condição para impedir de criar objetos com caracteristicas erradas. Embaixo impedimos que um aluno seja matriculado em um curso que não existe na FAT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [],
   "source": [
    "class uerjiano(humano):\n",
    "    \"\"\"Definir um etudante da UERJ que é um ser humano (a principio!!!)\"\"\"\n",
    "\n",
    "    def __init__(self, nome, sexo, curso, ano):\n",
    "\n",
    "        super().__init__(nome, sexo)\n",
    "        import numpy as np\n",
    "        # foi adicionado o atributo 'feliz' aqui por um proposito que será esclarecido embaixo\n",
    "        self.feliz = np.random.choice(['Não está', 'está'], p = [0.8, 0.2])\n",
    "        self.ano = ano\n",
    "        if curso.lower() in ['mecanica', 'produção', 'quimica']:\n",
    "                self.curso = curso\n",
    "        else:\n",
    "            raise ValueError(f\"Nã tem o curso {curso} na FAT\")\n",
    "\n",
    "    def periodo(self):\n",
    "        from datetime import datetime\n",
    "\n",
    "        self.periodo = datetime.now().year - int(self.ano)\n",
    "        print(f\" {self.nome} está no periodo {2 * self.periodo}\")\n",
    "        \n",
    "    def isfeliz(self):\n",
    "        import numpy as np\n",
    "        # as probabilidades são diferentes da classe mãe!\n",
    "        self.feliz = np.random.choice(['Não está', 'está'], p = [0.8, 0.2])\n",
    "        #print(f\"{self.nome} {self.feliz} feliz\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [
    {
     "output_type": "error",
     "ename": "ValueError",
     "evalue": "Nã tem o curso Fisica na FAT",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-169-d6a5fc2db2cd>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mrenan\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0muerjiano\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnome\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"Renan\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msexo\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"Homem\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcurso\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"Fisica\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mano\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m2016\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m<ipython-input-166-2857ff1f6336>\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, nome, sexo, curso, ano)\u001b[0m\n\u001b[1;32m     11\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcurso\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcurso\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Nã tem o curso {curso} na FAT\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mperiodo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: Nã tem o curso Fisica na FAT"
     ]
    }
   ],
   "source": [
    "renan = uerjiano(nome=\"Renan\", sexo = \"Homem\", curso = \"Fisica\", ano = 2016)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Podemos verificar que não foi inicializado o objeto `renan`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [
    {
     "output_type": "error",
     "ename": "NameError",
     "evalue": "name 'renan' is not defined",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-170-83898346aa10>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mrenan\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msexo\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'renan' is not defined"
     ]
    }
   ],
   "source": [
    "renan.sexo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}